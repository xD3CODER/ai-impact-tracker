// src/utils/equivalences.ts - Universal equivalence system for environmental impact
// Equivalences are stored in i18n files and generated by script

/**
 * Generated equivalence constants at build time from JSON files
 */
const CARBON_THRESHOLDS: readonly number[] = __CARBON_THRESHOLDS__;
const WATER_THRESHOLDS: readonly number[] = __WATER_THRESHOLDS__;
const CARBON_THRESHOLD_COUNTS: Record<number, number> =
	__CARBON_THRESHOLD_COUNTS__;
const WATER_THRESHOLD_COUNTS: Record<number, number> =
	__WATER_THRESHOLD_COUNTS__;

/**
 * Finds the number of equivalences for a given threshold
 */
function getEquivalenceCount(
	type: "carbon" | "water",
	threshold: number,
): number {
	const counts =
		type === "carbon" ? CARBON_THRESHOLD_COUNTS : WATER_THRESHOLD_COUNTS;
	return counts[threshold] || 0;
}

/**
 * Finds the appropriate threshold for a given value
 */
function findAppropriateThreshold(
	value: number,
	thresholds: readonly number[],
): number {
	return (
		thresholds
			.slice()
			.reverse()
			.find((threshold) => value >= threshold) || thresholds[0]
	);
}

/**
 * Available units for equivalences
 */
export const UNITS = {
	// Temps
	ms: "ms",
	s: "s",
	m: "min",
	h: "h",
	// Poids
	g: "g",
	kg: "kg",
	// Volume
	ml: "ml",
	L: "L",
} as const;

/**
 * Parses an equivalence in "value unit" format
 */
function parseEquivalence(equivalence: string): {
	value: string;
	unit: string;
} {
	const parts = equivalence.trim().split(/\s+/);
	if (parts.length >= 2) {
		const value = parts[0];
		const unit = parts.slice(1).join(" ");
		return { value, unit };
	}
	return { value: equivalence, unit: "" };
}

/**
 * Generates a pseudo-random index based on current time and day
 */
function getHourlyRandomIndex(arrayLength: number): number {
	const now = new Date();
	const hourSeed = now.getHours() + now.getDate() * 24;
	return hourSeed % arrayLength;
}

/**
 * Gets a random water equivalence based on consumption
 */
export function getWaterEquivalence(waterConsumption: number): {
	value: string;
	unit: string;
} {
	const threshold = findAppropriateThreshold(
		waterConsumption,
		WATER_THRESHOLDS,
	);
	const equivalenceCount = getEquivalenceCount("water", threshold);

	if (equivalenceCount === 0) {
		return { value: "0", unit: UNITS.ml };
	}

	const randomIndex = getHourlyRandomIndex(equivalenceCount);
	const key = `equivalencesWater_${threshold.toString().replace(".", "_")}_${randomIndex}`;

	try {
		const equivalence = i18n.t(key);
		return parseEquivalence(equivalence);
	} catch (error) {
		console.warn(`Missing equivalence key: ${key}`, error);
		return { value: "0", unit: UNITS.ml };
	}
}

/**
 * Gets a random carbon equivalence based on consumption
 */
export function getCarbonEquivalence(carbonFootprint: number): {
	value: string;
	unit: string;
} {
	const threshold = findAppropriateThreshold(
		carbonFootprint,
		CARBON_THRESHOLDS,
	);
	const equivalenceCount = getEquivalenceCount("carbon", threshold);

	if (equivalenceCount === 0) {
		return { value: "0", unit: UNITS.g };
	}

	const randomIndex = getHourlyRandomIndex(equivalenceCount);
	const key = `equivalencesCarbon_${threshold.toString().replace(".", "_")}_${randomIndex}`;

	try {
		const equivalence = i18n.t(key);
		return parseEquivalence(equivalence);
	} catch (error) {
		console.warn(`Missing equivalence key: ${key}`, error);
		return { value: "0", unit: UNITS.g };
	}
}

/**
 * Utility class to maintain compatibility with old code
 */
export class EquivalenceManager {
	/**
	 * Selects a random water equivalence adapted to volume (fixed per hour)
	 */
	static getWaterEquivalence(waterMl: number): string {
		const result = getWaterEquivalence(waterMl);
		return result.value !== "0" ? `${result.value} ${result.unit}` : "---";
	}

	/**
	 * Selects a random carbon equivalence adapted to weight (fixed per hour)
	 */
	static getCarbonEquivalence(carbonGrams: number): string {
		const result = getCarbonEquivalence(carbonGrams);
		return result.value !== "0" ? `${result.value} ${result.unit}` : "---";
	}

	static capitalize(string: string): string {
		return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Generates impact messages for display
	 */
	static getImpactMessages(
		waterEquivalence: string,
		carbonEquivalence: string,
	): string[] {
		const messages = [];
		if (waterEquivalence && waterEquivalence !== "---") {
			messages.push(`ðŸ’§ ${EquivalenceManager.capitalize(waterEquivalence)}`);
		}
		if (carbonEquivalence && carbonEquivalence !== "---") {
			messages.push(`ðŸŒŽ ${EquivalenceManager.capitalize(carbonEquivalence)}`);
		}
		return messages;
	}

	/**
	 * Returns complete equivalences for a given impact
	 */
	static getCompleteEquivalences(carbonGrams: number, waterMl: number) {
		const waterEquivalence = EquivalenceManager.getWaterEquivalence(waterMl);
		const carbonEquivalence =
			EquivalenceManager.getCarbonEquivalence(carbonGrams);
		const impactMessages = EquivalenceManager.getImpactMessages(
			waterEquivalence,
			carbonEquivalence,
		);

		return {
			water: waterEquivalence,
			carbon: carbonEquivalence,
			messages: impactMessages,
		};
	}

	/**
	 * Validates that equivalences are available
	 */
	static validateAvailability(): { water: boolean; carbon: boolean } {
		const testWater = EquivalenceManager.getWaterEquivalence(1);
		const testCarbon = EquivalenceManager.getCarbonEquivalence(1);

		return {
			water: testWater !== "---",
			carbon: testCarbon !== "---",
		};
	}

	/**
	 * Retourne les seuils disponibles pour debug/info
	 */
	static getAvailableThresholds() {
		return {
			carbon: [...CARBON_THRESHOLDS],
			water: [...WATER_THRESHOLDS],
		};
	}
}
